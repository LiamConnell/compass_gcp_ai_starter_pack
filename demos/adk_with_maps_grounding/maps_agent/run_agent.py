import asyncio
from typing import List
from dotenv import load_dotenv
from google.adk.sessions import InMemorySessionService
from google.adk import Runner
from google.adk.events.event import Event
from google.genai import types
from .agent import root_agent

load_dotenv()

async def run_agent(query: str) -> List[Event]:
    """
    Run the maps agent with a query and return all events.
    
    Args:
        query: The user query to process
        
    Returns:
        List of Event objects generated by the agent
    """
    # Create session service and session
    session_service = InMemorySessionService()
    session = await session_service.create_session(
        app_name="maps_agent",
        user_id="test_user"
    )
    
    # Create content object
    user_content = types.Content(role="user", parts=[types.Part(text=query)])
    
    # Create runner and run the agent
    runner = Runner(session_service=session_service, app_name="maps_agent", agent=root_agent)
    
    events: List[Event] = []
    async for event in runner.run_async(
        user_id="test_user",
        session_id=session.id,
        new_message=user_content
    ):
        events.append(event)
    
    return events